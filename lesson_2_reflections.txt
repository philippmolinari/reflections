What happens when you initialize a repository? Why do you need to do it?
A .git file gets created in the repository

How can you use the staging area to make sure you have one commit per logical change?
Always only add the file that belong to one logical change to the staging area. When finished you can use the commmand git diff --staged to compare the changes against the last commit from the repository to ensure there only changes that belong to the logical change you want to commit. Then commit your changes by using git commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches could be helpful when we try new features (such as a new language or a redesign of the code), but we want to keep the "old version" as a basis for further development as well until we are sure that we want to merge the new feature into our main path.

How do the diagrams help you visualize the branch structure?
The diagrams help by listing the different branches, but also the commits of the single branches. Furthermore, they show the most current commit of each branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches will merge the changes of the commits of the two branches. All commits will be available in the merged branch. The way we show it in the diagram illustrates these facts.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
pros: less work, in omst of the cases manual work is not necessary
cons: git can't always judge which is the appropriate version of code which will lead to merge conflicts