When would you want to use a remote repository rather than keeping all your work local?
E.g. if you want multiple people work on your project or if you want to work from multiple computers on the same projects. Furthermore, if you want to share your code with other developers.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
You might not want to pull changes to the remote repository, because they are not yet ready for publishing them to others. Or maybe you never want to make them available for others.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Forks are a copy of an existing repository on github. You would want to use forks if you are not allowed to or you don't want to change the original repository. 
Clones, however, are copies of existing remote repositories to your local or of exisiting local repositories to another local repository. You would want to use them to share the work between different physical instances, but at the end combine the work that has been done on these instances.
Branches are just a label for commits that can be within one repository and there within one fork and branch. You would want to use a branch, e.g. to try out new features, but at the same time keep the original version of the files until you merge them. The difference to forks and clones is that you have those changes all in one place, e.g. on your local computer.

What is the benefit of having a copy of the last known state of the remote stored locally?
The benefit is that you can work offline and anaylze / possibly merge the changes of the remote with your changes.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
You could work, e.g. on a shared drive and work with local copies of your files or send your changes to each other via e-mail. Not having to learn all the new git commands would probably be much easier. However, it would be very hard to incorporate all changes that were made by different contributors. Furthermore, it would be quite hard to keep track of the changes.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
A separate branch makes sense if we want to keep the version of the master branch as the reference for all other developers that work on the project. Working directly on master, however, is much simpler with regards to merging, pulling, pushing etc.